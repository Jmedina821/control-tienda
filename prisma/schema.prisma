// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique
  code    String    @unique
  Product Product[]
}

model Product {
  id                    String      @id @default(cuid())
  name                  String
  code                  String      @unique
  category              Category    @relation(fields: [categoryId], references: [id])
  categoryId            String
  OrderItem             OrderItem[]
  price                 Float
  Inventory             Inventory[]
  image                 String?
  lowExistenceThreshold Int         @default(0)
}

model Client {
  id             String  @id @default(cuid())
  fullname       String
  phone          String
  identification String
  address        String?
  Order          Order[]
}

model Order {
  id              String        @id @default(cuid())
  client          Client        @relation(fields: [clientId], references: [id])
  clientId        String
  createdAt       DateTime      @default(now())
  OrderItem       OrderItem[]
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  deletedAt       DateTime?
  exchangeRate    ExchangeRate  @relation(fields: [exchangeRateId], references: [id])
  exchangeRateId  String
}

model Inventory {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(0)
}

model PaymentMethod {
  id    String  @id @default(cuid())
  name  String  @unique
  Order Order[]
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  orderId   String
  productId String
  quantity  Int
}

model ExchangeRate {
  id        String   @id @default(cuid())
  rate      Float
  createdAt DateTime @default(now())
  Order     Order[]
}

//NEXTAUTH.JS AUTHENTICATION

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
